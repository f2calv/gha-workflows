name: helm-chart-package

on:
  workflow_call:
    inputs:
      image-registry:
        type: string
        description: e.g. ghcr.io, xyz.azurecr.io or docker.io
        required: true
      image-repository:
        type: string
        description: Name of the image.
        required: true
      chart-registry:
        type: string
        description: e.g. ghcr.io, xyz.azurecr.io or docker.io
        required: true
      chart-registry-username:
        type: string
      chart-registry-password:
        type: string
        default: ${{ secrets.GITHUB_TOKEN }}
      chart-repository:
        type: string
        description: If unset we use the name of the current Git repository.
        required: true
      tag:
        type: string
        description: e.g. 1.2.3
        required: true
      tag-override:
        type: string
        description: e.g. latest, latest-dev
      chart-path:
        type: string
        description: Relative path to the charts folder in the Git repository.
        default: ./charts/
      is-library-chart:
        type: boolean
        description: Is the helm chart a library chart?
        default: false
      push-chart:
        type: boolean
        description: By default always push the newly packaged chart.
        default: true
      chart-testing-cli-version:
        type: string
        description: See https://quay.io/repository/helmpack/chart-testing?tab=tags
        default: latest
      chart-testing-cli-command:
        type: string
        description: Accepts lint or install. Default is lint.
        default: lint

jobs:
  helm-chart-package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: setup helm (1 of 2) #pull version from devcontainer.json
        run: |
          npm install --global json5
          json5 -c .devcontainer/devcontainer.json
          VERSION_TO_INSTALL=$(cat .devcontainer/devcontainer.json | jq -r '.features[] | select(.helm | . != null).helm')
          git restore .devcontainer/devcontainer.json
          echo "VERSION_TO_INSTALL=$VERSION_TO_INSTALL" >> $GITHUB_ENV
          echo "VERSION_TO_INSTALL=$VERSION_TO_INSTALL"

      - name: setup helm (2 of 2)
        uses: azure/setup-helm@v4
        with:
          version: ${{ env.VERSION_TO_INSTALL }}

      # - name: set vars
      #   run: |
          

      - name: helm build/lint/package
        run: |
          IMAGE_REGISTRY=${{ inputs.image-registry }}
          export IMAGE_REGISTRY=${IMAGE_REGISTRY,,}
          echo "IMAGE_REGISTRY=$IMAGE_REGISTRY"

          IMAGE_REPOSITORY=${{ inputs.image-repository }}
          export IMAGE_REPOSITORY=${IMAGE_REPOSITORY,,}
          echo "IMAGE_REPOSITORY=$IMAGE_REPOSITORY"
          
          export IMAGE_NAME=$(basename $IMAGE_REPOSITORY)
          echo "IMAGE_NAME=$IMAGE_NAME"

          CHART_REGISTRY=${{ inputs.chart-registry }}
          export CHART_REGISTRY=${CHART_REGISTRY,,}
          echo "CHART_REGISTRY=$CHART_REGISTRY"
          echo "CHART_REGISTRY=$CHART_REGISTRY" >> $GITHUB_ENV

          CHART_REPOSITORY=${{ inputs.chart-repository }}
          export CHART_REPOSITORY=${CHART_REPOSITORY,,}
          echo "CHART_REPOSITORY=$CHART_REPOSITORY"
          echo "CHART_REPOSITORY=$CHART_REPOSITORY" >> $GITHUB_ENV

          export CHART_NAME=$(basename $CHART_REPOSITORY)
          echo "CHART_NAME=$CHART_NAME"
          echo "CHART_NAME=$CHART_NAME" >> $GITHUB_ENV

          export CHART_PATH=${{ inputs.chart-path }}
          echo "CHART_PATH=$CHART_PATH"

          export TAG=${{ inputs.tag }}
          echo "TAG=$TAG"
          echo "TAG=$TAG" >> $GITHUB_ENV

          LABEL=$IMAGE_REPOSITORY-$TAG
          if [[ "${#LABEL}" -gt 63 ]]; then
            echo "::error::RFC 1123 Label Names maximum length of 63 characters reached for '$LABEL', suggest shortening your repository or branch name."
            exit 1
          fi

          printf "\n\n>helm version\n"
          helm version

          printf "\n\n>${{ inputs.chart-registry-password }} | helm registry login $CHART_REGISTRY/$CHART_REPOSITORY --username ${{ inputs.chart-registry-username }} --password-stdin\n"
          printf ${{ inputs.chart-registry-password }} | helm registry login $CHART_REGISTRY/$CHART_REPOSITORY --username ${{ inputs.chart-registry-username }} --password-stdin
          #printf $servicePrincipalKey | helm registry login $CHART_REGISTRY --username $servicePrincipalId --password-stdin

          printf "\n\nUpdate the version+appVersion in the Chart.yaml before packaging...\n"
          yq -i '.version = env(TAG)' $CHART_PATH/Chart.yaml
          if [[ "${{ inputs.is-library-chart }}" == "false" ]]; then
            yq -i '.appVersion = env(TAG)' $CHART_PATH/Chart.yaml
          fi
          cat $CHART_PATH/Chart.yaml

          if [[ "${{ inputs.is-library-chart }}" == "false" ]]; then
            printf "\n\nUpdate the repository in the values.yaml before packaging...\n"
            yq -i '.image.repository = env(IMAGE_REPOSITORY)' $CHART_PATH/values.yaml
            yq -i '.image.tag = env(TAG)' $CHART_PATH/values.yaml

            printf "\n\nAdd git repository context in the values.yaml before packaging...\n"
            yq -i '.git.repository=env(GITHUB_REPOSITORY)' $CHART_PATH/values.yaml
            yq -i '.git.branch=env(GITHUB_REF)' $CHART_PATH/values.yaml
            yq -i '.git.commit=env(GITHUB_SHA)' $CHART_PATH/values.yaml

            printf "\n\nAdd github context in the values.yaml before packaging...\n"
            yq -i '.github.workflow=env(GITHUB_WORKFLOW)' $CHART_PATH/values.yaml
            yq -i '.github.run_id=env(GITHUB_RUN_ID)' $CHART_PATH/values.yaml
            yq -i '.github.run_number=env(GITHUB_RUN_NUMBER)' $CHART_PATH/values.yaml

            cat $CHART_PATH/values.yaml
          fi

          #Note: when pulling library charts from private ghcr packages feeds you need to give the pulling repository permission to pull the package
          #https://helm.sh/docs/helm/helm_dependency_update/
          printf "\n\n>helm dependency update $CHART_PATH\n"
          helm dependency update $CHART_PATH

          #https://helm.sh/docs/helm/helm_dependency_list/
          printf "\n\n>helm dependency list $CHART_PATH\n"
          helm dependency list $CHART_PATH

          #https://helm.sh/docs/helm/helm_lint/
          printf "\n\n>helm lint $CHART_PATH\n"
          helm lint $CHART_PATH

          if [[ "${{ inputs.is-library-chart }}" == "false" ]]; then
            #https://helm.sh/docs/helm/helm_package/
            printf "\n\n>helm package $CHART_PATH --destination ${{ github.workspace }}/artifacts/ --version $TAG --app-version $TAG\n"
            helm package $CHART_PATH --destination ${{ github.workspace }}/artifacts/ --version $TAG --app-version $TAG

            #https://helm.sh/docs/helm/helm_template/
            printf "\n\n>helm template $CHART_NAME $CHART_PATH > ${{ github.workspace }}/artifacts/$CHART_NAME.yaml\n"
            helm template $CHART_NAME $CHART_PATH > ${{ github.workspace }}/artifacts/$CHART_NAME.yaml
            cat ${{ github.workspace }}/artifacts/$CHART_NAME.yaml
          else
            #https://helm.sh/docs/helm/helm_package/
            printf "\n\n>helm package $CHART_PATH --destination ${{ github.workspace }}/artifacts/ --version $TAG\n"
            helm package $CHART_PATH --destination ${{ github.workspace }}/artifacts/ --version $TAG

            printf "\n\nhelm template skipped...\n"
          fi

          printf "\n\nsuccess!"

      - uses: helm/kind-action@v1
        if: inputs.chart-testing-cli-command == 'install' && inputs.is-library-chart == false

      #https://github.com/helm/chart-testing/blob/main/doc/ct_lint.md
      - name: chart-testing (lint)
        if: inputs.chart-testing-cli-command == 'lint'
        run: |
          ARGS="--set=image.tag=$TAG"
          docker run --rm --network host --workdir=/data --volume ~/.kube/config:/root/.kube/config:ro \
            --volume $(pwd):/data quay.io/helmpack/chart-testing:${{ inputs.chart-testing-cli-version }} \
            ct ${{ inputs.chart-testing-cli-command }} --charts $CHART_PATH \
            --helm-extra-args "$ARGS" --validate-maintainers=false

      #https://github.com/helm/chart-testing/blob/main/doc/ct_install.md
      - name: chart-testing (install)
        if: inputs.chart-testing-cli-command == 'install' && inputs.is-library-chart == false
        run: |
          #Note: we can only fully install the chart if we have pushed the image as well, assumption inputs.push-chart == inputs.push-image
          ARGS="--set=image.tag=$TAG"
          if [[ "${{ inputs.push-chart }}" == "false" ]]; then
            ARGS="--set=image.repository=nginx --set=image.tag=latest"
          fi
          docker run --rm --network host --workdir=/data --volume ~/.kube/config:/root/.kube/config:ro \
            --volume $(pwd):/data quay.io/helmpack/chart-testing:${{ inputs.chart-testing-cli-version }} \
            ct ${{ inputs.chart-testing-cli-command }} --charts $CHART_PATH \
            --helm-extra-set-args "$ARGS" --build-id ${{ github.run_id }}

      - name: helm push
        if: inputs.push-chart == true
        run: |
          #https://helm.sh/docs/helm/helm_push/
          printf "\n\n>helm push ${{ github.workspace }}/artifacts/$CHART_NAME-$TAG.tgz oci://$CHART_REGISTRY/$CHART_REPOSITORY\n"
          helm push ${{ github.workspace }}/artifacts/$CHART_NAME-$TAG.tgz oci://$CHART_REGISTRY/$CHART_REPOSITORY

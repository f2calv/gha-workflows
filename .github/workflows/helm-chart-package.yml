name: helm-chart-package

on:
  workflow_call:
    inputs:
      registry:
        type: string
        description: e.g. ghcr.io or xyz.azurecr.io
        default: ghcr.io
      tag:
        type: string
        description: e.g. latest, latest-dev, 1.2.3
        required: true
      chart-path:
        type: string
        description: Relative path to the charts folder in the Git repository.
        default: ./charts
      chart-name:
        type: string
        description: If unset we use the name of the current Git repository.
      is-library-chart:
        type: boolean
        description: Is the helm chart a library chart?
        default: false

jobs:
  helm-chart-package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: setup helm (1 of 2) #pull version from devcontainer.json
        run: |
          npm install --global json5
          json5 -c .devcontainer/devcontainer.json
          VERSION_TO_INSTALL=$(cat .devcontainer/devcontainer.json | jq -r '.features[] | select(.helm | . != null).helm')
          echo "VERSION_TO_INSTALL=$VERSION_TO_INSTALL" >> $GITHUB_ENV
          echo "VERSION_TO_INSTALL=$VERSION_TO_INSTALL"

      - name: setup helm (2 of 2)
        uses: azure/setup-helm@v4
        with:
          version: ${{ env.VERSION_TO_INSTALL }}

      - name: set vars
        run: |
          if [ -z "${{ inputs.chart-name }}" ]; then
            CHART_NAME=$(echo ${{ github.repository }} | sed "s|${{ github.repository_owner }}\/||g")
          else
            CHART_NAME=${{ inputs.chart-name }}
          fi
          CHART_NAME=${CHART_NAME,,}
          echo "CHART_NAME=$CHART_NAME" >> $GITHUB_ENV
          echo "CHART_PATH=${{ inputs.chart-path }}/$CHART_NAME" >> $GITHUB_ENV

          if [ "${{ inputs.registry }}" == "ghcr.io" ]; then
            REGISTRY=${{ inputs.registry }}/${{ github.repository_owner }}
          else
            REGISTRY=${{ inputs.registry }}
          fi
          echo "REGISTRY=$REGISTRY" >> $GITHUB_ENV
          echo "REPOSITORY=$REGISTRY/$CHART_NAME" >> $GITHUB_ENV

      - name: helm build/lint/package
        run: |
          echo "CHART_NAME=$CHART_NAME"
          echo "CHART_PATH=$CHART_PATH"
          echo "REGISTRY=$REGISTRY"
          echo "REPOSITORY=$REPOSITORY"

          printf "\nhelm version...\n"
          helm version

          printf "\nhelm registry login...\n"
          printf ${{ secrets.GITHUB_TOKEN }} | helm registry login $REGISTRY --username ${{ github.repository_owner }} --password-stdin
          #printf $servicePrincipalKey | helm registry login $REGISTRY --username $servicePrincipalId --password-stdin

          printf "\nUpdate the version+appVersion in the Chart.yaml before packaging...\n"
          yq -i '.version = "${{ inputs.tag }}"' $CHART_PATH/Chart.yaml
          if [ "${{ inputs.is-library-chart }}" == "false" ]; then
            yq -i '.appVersion = "${{ inputs.tag }}"' $CHART_PATH/Chart.yaml
          fi
          cat $CHART_PATH/Chart.yaml

          printf "\nUpdate the repository in the values.yaml before packaging...\n"
          yq -i '.image.repository = env(REPOSITORY)' $CHART_PATH/values.yaml
          cat $CHART_PATH/values.yaml

          #https://helm.sh/docs/helm/helm_dependency_update/
          printf "\nhelm dependency update...\n"
          helm dependency update $CHART_PATH
    
          #https://helm.sh/docs/helm/helm_dependency_list/
          printf "\nhelm dependency list...\n"
          helm dependency list $CHART_PATH
    
          #https://helm.sh/docs/helm/helm_lint/
          printf "\nhelm lint...\n"
          helm lint $CHART_PATH

          #https://helm.sh/docs/helm/helm_package/
          printf "\nhelm package...\n"
          helm package $CHART_PATH --destination ${{ github.workspace }}/artifacts/ --app-version ${{ inputs.tag }}
    
          if [ "${{ inputs.is-library-chart }}" == "false" ]; then
            #https://helm.sh/docs/helm/helm_template/
            printf "\nhelm template to show the fully expanded manifest...\n"
            helm template $CHART_NAME $CHART_PATH \
                --version "${{ inputs.tag }}" \
                --set image.tag="${{ inputs.tag }}" \
                --set image.repository=$REPOSITORY \
                --set run_id="${{ github.run_id }}" \
                --set run_number="${{ github.run_number }}" \
                --set workflow="${{ github.workflow }}" \
                --set branch="${{ github.ref }}" \
                --set commit="${{ github.sha }}" \
                --set repo="${{ github.repository }}" \
                > ${{ github.workspace }}/artifacts/$CHART_NAME.yaml
            cat ${{ github.workspace }}/artifacts/$CHART_NAME.yaml
          fi

          printf "\nsuccess!"
        
      - name: helm push
        if: github.ref == 'refs/heads/main'
        run: |
          #https://helm.sh/docs/helm/helm_push/
          helm push ${{ github.workspace }}/artifacts/$CHART_NAME-${{ inputs.tag }}.tgz oci://$REGISTRY/charts

      # - uses: actions/setup-python@v5
      #   with:
      #     python-version: 3.7

      # - name: chart-testing (setup)
      #   uses: helm/chart-testing-action@v2

      # - name: chart-testing (run list-changed)
      #   id: list-changed
      #   run: |
      #     changed=$(ct list-changed --target-branch main)
      #     if [[ -n "$changed" ]]; then
      #       echo "changed=true" >> $GITHUB_OUTPUT
      #     fi

      # - name: chart-testing (run lint)
      #   run: ct lint

      # - name: create kind cluster
      #   uses: helm/kind-action@v1
      #   #if: steps.list-changed.outputs.changed == 'true'

      # - name: chart-testing (run install)
      #   run: ct install

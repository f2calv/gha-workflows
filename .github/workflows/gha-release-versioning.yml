name: gha-release-versioning

on:
  workflow_call:
    #Note: We don't need to pass in GITHUB_TOKEN to a reusable workflow. When a reusable workflow is triggered by a caller workflow, the github context is always associated with the caller workflow. The called workflow is automatically granted access to github.token and secrets.GITHUB_TOKEN.
    #see https://docs.github.com/en/actions/using-workflows/reusing-workflows

jobs:
  gha-release-versioning:
    env:
      #Note: GH_TOKEN is automatically picked up by github cli
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: gitversion
        shell: pwsh
        id: gitversion
        run: |
          dotnet tool update -g GitVersion.Tool
          $GitVersion = dotnet-gitversion ${{ github.workspace }} /nofetch | ConvertFrom-Json
          Write-Host "SemVer=$($GitVersion.SemVer)"
          echo "SemVer=$($GitVersion.SemVer)" >> $env:GITHUB_OUTPUT
          Write-Host "FullSemVer=$($GitVersion.FullSemVer)"
          echo "FullSemVer=$($GitVersion.FullSemVer)" >> $env:GITHUB_OUTPUT
          Write-Host "MajorVer=$($GitVersion.Major)"
          echo "MajorVer=$($GitVersion.Major)" >> $env:GITHUB_OUTPUT

      - uses: f2calv/gha-check-release-exists@v1
        id: check-release-exists
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ReleaseName: ${{ steps.gitversion.outputs.SemVer }}

      - name: create release
        uses: softprops/action-gh-release@v1
        if: |
          steps.check-release-exists.outputs.ReleaseExists == 'false'
            && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || github.event.inputs.PublishPreview == 'true')
        with:
          tag_name: v${{ steps.gitversion.outputs.FullSemVer }}
          name: ${{ steps.gitversion.outputs.FullSemVer }}

      - name: git apply/move major tag
        if: |
          steps.check-release-exists.outputs.ReleaseExists == 'false'
            && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git tag -fa v${{ steps.gitversion.outputs.MajorVer }} -m "move v${{ steps.gitversion.outputs.MajorVer }} tag"
          git push origin v${{ steps.gitversion.outputs.MajorVer }} --force

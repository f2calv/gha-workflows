name: container-image-build
#Note: this uses buildx for multiarchitecture builds, maybe make an opt-out for this in the future?

on:
  workflow_call:
    inputs:
      registry:
        type: string
        description: e.g. ghcr.io/gh-user, xyz.azurecr.io or docker.io
        required: true
      repository:
        type: string
        description: If empty the repository will derive from name of the repo, e.g. gh-user/my-repo-name
        default: ''
      repository-prefix:
        type: string
        description: e.g. prefix/
        default: ''
      dockerfile:
        type: string
        description: Location of the Dockerfile in the local repository you wish to build.
        default: Dockerfile
      tag:
        type: string
        description: e.g. 1.2.3-feature-my-feature.12
        required: true
      defaultBranchTag:
        type: string
        description: Default branch tag, e.g. latest
        default: latest
      featureBranchTag:
        type: string
        description: Feature branch tag, e.g. latest-dev
        default: latest-dev
      platform:
        type: string
        description: Specify the target platform for the build output, e.g. linux/amd64,linux/arm64,linux/arm/v7
        default: linux/amd64,linux/arm64,linux/arm/v7
      args:
        type: string
        description: Used to pass optional build arguments.
        default: ''
      defaultBranch:
        type: string
        description: Workflow behaves differently on the default branch.
        default: refs/heads/main

      #TODO: this...
      pushOnlyOnDefaultBranch:
        type: boolean
        description: Only push when on the default branch.
        default: false
        

jobs:
  container-image-build:
    runs-on: ubuntu-latest
    if: github.actor != 'depbot'
    #https://github.blog/changelog/2021-04-20-github-actions-control-permissions-for-github_token/
    #https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
    steps:
      - uses: actions/checkout@v4

      - name: set vars
        id: setupvars
        run: |
          REPOSITORY=${{ inputs.repository }}

          if [ ! -z "$REPOSITORY" ]; then
            #lowercase the input
            REPOSITORY=${REPOSITORY,,}
            IMAGE_NAME=${REPOSITORY,,}
          else
            #set the repository to the current gh repository, then strip the repository_owner away
            REPOSITORY=${{ github.repository }}
            REPOSITORY=$(echo $REPOSITORY | sed "s|${{ github.repository_owner }}\/||g")
            REPOSITORY=${REPOSITORY,,}
            IMAGE_NAME=${REPOSITORY,,}
          fi
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "REPOSITORY=${{ inputs.repository-prefix }}$REPOSITORY" >> $GITHUB_ENV

          TAG=${{ inputs.tag }}
          TAG=${TAG,,}
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "REGISTRY=${{ inputs.registry }}" >> $GITHUB_ENV

      - name: docker login ${{ inputs.registry }}
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin

      - name: docker buildx build/push
        id: build
        run: |
          docker buildx create --name multiarchtest --use

          TAGS=()
          TAGS+=(-t "$REGISTRY/$REPOSITORY:$TAG")
          if [ '${{ github.ref }}' == '${{ inputs.defaultBranch }}' ]; then
            ADDITIONAL_TAG=${{ inputs.defaultBranchTag }}
          else
            ADDITIONAL_TAG=${{ inputs.featureBranchTag }}
          fi
          ADDITIONAL_TAG=${ADDITIONAL_TAG,,}
          TAGS+=(-t "$REGISTRY/$REPOSITORY:$ADDITIONAL_TAG")

          ARGS=()
          ARGS+=(--push)
          if [ ! -z "${{ inputs.args }}" ]; then
            ARGS+=(${{ inputs.args }})
          fi

          echo "REGISTRY=$REGISTRY"
          echo "REPOSITORY=$REPOSITORY"
          echo "TAG=$TAG"
          echo "TAGS=${TAGS[@]}"
          echo "args=${{ inputs.args }}"
          echo "ARGS=${ARGS[@]}"
          echo "DockerFile=${{ inputs.dockerfile }}"

          docker buildx build \
            -f "${{ inputs.dockerfile }}" \
            "${TAGS[@]}" \
            --label "GITHUB_RUN_ID=${{ github.run_id }}" \
            --label "IMAGE_NAME=$IMAGE_NAME" \
            --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
            --build-arg GIT_REPO=${{ github.repository }} \
            --build-arg GIT_TAG=$TAG \
            --build-arg GIT_BRANCH=${{ github.ref }} \
            --build-arg GIT_COMMIT=${{ github.sha }} \
            --build-arg GITHUB_WORKFLOW="${{ github.workflow }}" \
            --build-arg GITHUB_RUN_ID=${{ github.run_id }} \
            --build-arg GITHUB_RUN_NUMBER=${{ github.run_number }} \
            --platform ${{ inputs.platform }} \
            --pull \
            "${ARGS[@]}" \
            .
